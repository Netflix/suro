ext.githubProjectName = rootProject.name

buildscript {
    repositories {
      mavenLocal()
      mavenCentral() // maven { url 'http://jcenter.bintray.com' }
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript 
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        //noinspection SpellCheckingInspection
        tasks.withType(Javadoc) {
            // disable the crazy super-strict doclint tool in Java 8
            //noinspection SpellCheckingInspection
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

allprojects {
    repositories { 
      mavenCentral()
      maven{
        name 'github.release.repo'
        url 'https://raw.github.com/bulldog2011/bulldog-repo/master/repo/releases/'
      }
      maven{
        name 'sonatype'
        url 'https://oss.sonatype.org/content/groups/public/'
      }
    }
}

apply from: file('gradle/convention.gradle')
apply from: file('gradle/maven.gradle')
//apply from: file('gradle/check.gradle')
apply from: file('gradle/license.gradle')
apply from: file('gradle/release.gradle')

subprojects {
    apply plugin: 'idea'
    apply plugin: 'project-report'

    group = "com.netflix.${githubProjectName}"

    configurations {
      all*.exclude group: 'org.codehaus.jackson', module: 'jackson-mapper'
      all*.exclude group: 'org.codehaus.jackson', module: 'jackson-core'
    }

    dependencies {
      compile 'com.netflix.archaius:archaius-core:0.5.11'
      compile 'com.netflix.servo:servo-core:0.4.32'
      compile 'com.netflix.governator:governator:1.2.3'
      compile 'com.netflix.eureka:eureka-client:1.1.109'
      compile 'com.netflix.ribbon:ribbon-core:0.2.1'
      compile 'com.netflix.ribbon:ribbon-eureka:0.2.1'
      compile 'log4j:log4j:1.2.17'

      compile 'org.apache.thrift:libthrift:0.9.1'
      compile 'org.slf4j:slf4j-api:1.6.4'
      compile 'com.google.guava:guava:11.0.2'
      compile 'joda-time:joda-time:2.1'
      compile 'com.fasterxml.jackson.core:jackson-databind:2.1.4'
      compile 'com.fasterxml.jackson.core:jackson-annotations:2.1.4'
      compile 'com.fasterxml.jackson.core:jackson-core:2.1.4'
      compile 'com.fasterxml.jackson.datatype:jackson-datatype-guava:2.2.0'

      compile 'com.ning:compress-lzf:0.9.5'
      compile 'com.leansoft:bigqueue:0.7.0'
      compile 'commons-io:commons-io:2.4'

      compile (
        [group: 'org.apache.hadoop', name: 'hadoop-core', version: '0.20.205.0', transitive: false]
      )

      runtime 'com.netflix.netflix-commons:netflix-commons-util:0.1.1'

      testCompile 'org.mockito:mockito-core:1.9.5'
      testCompile 'junit:junit:4.+'
    }

    test {
        forkEvery = 1
        maxParallelForks = 1
    }
}

project(':suro-core') {
    dependencies {
        compile 'org.antlr:antlr-runtime:3.4'
        compile 'commons-jxpath:commons-jxpath:1.3'
    }
}

project(':suro-client') {
  dependencies {
    compile project(':suro-core')

    testCompile project(':suro-core').sourceSets.test.output
    testCompile project(':suro-kafka')
  }
}

project(':suro-server') {
  apply plugin: 'application'
	
  dependencies {
    compile project(':suro-core')
    compile project(':suro-client')
    compile project(':suro-kafka')
    compile project(':suro-localfile')
    compile project(':suro-s3')

    compile 'org.eclipse.jetty:jetty-servlet:7.6.7.v20120910'
    compile 'com.sun.jersey.contribs:jersey-guice:1.11'
    compile 'com.sun.jersey:jersey-bundle:1.11'
    compile 'javax.servlet:servlet-api:2.5'
    compile 'com.amazonaws:aws-java-sdk:1.4.7'

    compile 'commons-cli:commons-cli:1.2'
    
    testCompile project(':suro-client').sourceSets.test.output
  }

  mainClassName = "com.netflix.suro.SuroServer"
  task (runServer, type: JavaExec, dependsOn: jar) {
    main = "com.netflix.suro.SuroServer"
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.compileClasspath
    args = ['-m', 'conf/routingmap.json', '-s', 'conf/sink.json']
  }
  installApp {
    into('build/install/'+applicationName + '-' + version){
      from ('conf').into '/conf'
    }
  }
  distZip {
    into(applicationName){
      from ('conf').into applicationName + '-' + version + '/conf'
    }	
  }
  distTar {
    into(applicationName){
      from ('conf').into applicationName + '-' + version + '/conf'
    }	
  }
}

project(':suro-integration-test') {
  dependencies {
    testCompile project(':suro-core')
    testCompile project(':suro-client')
    testCompile project(':suro-server')
    testCompile project(':suro-client').sourceSets.test.output
    testCompile project(':suro-server').sourceSets.test.output
  }
}

project(':suro-kafka') {
  dependencies {
    compile project(':suro-core')

    compile('org.apache.kafka:kafka_2.9.2:0.8.1.1') {
      exclude module: 'jms'
      exclude module: 'jmxtools'
      exclude module: 'jmxri'
    }

    testCompile project(':suro-client')
  }
}

project(':suro-s3') {
    dependencies {
        compile project(':suro-core')
        compile project(':suro-localfile')

        compile 'net.java.dev.jets3t:jets3t:0.9.0'
        compile 'com.amazonaws:aws-java-sdk:1.4.7'

        testCompile project(':suro-client')
    }
}

project(':suro-localfile') {
    dependencies {
        compile project(':suro-core')

        compile project(':suro-client')

        testCompile project(':suro-client')
    }
}
